import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * SAVINA Liza
 * VABRE Aliénor
 * 29/11/2024
 */

/**
 *
 * @author alien
 */
public class MasterMind extends JFrame {

    private Color[] couleurs = {Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW};
    private Map<Color, Integer> couleurToNumero = new HashMap<>();
    private JButton btnValider;

    private Integer[][] plateauDeJeu = new Integer[8][4]; // Plateau de jeu, initialisé à null
    private JButton[][] grilleButtons = new JButton[8][4];
    private JButton[] combinaisonButtons = new JButton[4];
    private int[] combinaisonNumerique = new int[4]; // Numéros associés à la combinaison en cours
    private int currentRow = 7; // Ligne actuelle (de bas en haut)


    /**
     * Constructeur principal
     */
    public MasterMind() {
        setTitle("MasterMind");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        setSize(400, 600);

        initMapCouleurs(); // Associe les couleurs aux numéros
        initComponents();
        configurerPanneauGrille();
        configurerPanneauCombinaison();

        // Listener pour le bouton Valider
        btnvalider.addActionListener(e -> validerCombinaison());
    }

    /**
     * Initialise la correspondance entre les couleurs et les numéros.
     */
    private void initMapCouleurs() {
        for (int i = 0; i < couleurs.length; i++) {
            couleurToNumero.put(couleurs[i], i + 1); // Associe les couleurs à des numéros (1, 2, 3, 4, ...)
        }
    }

    /**
     * Configure les boutons dans le panneau de grille.
     */
    private void configurerPanneauGrille() {
        PanneauGrille.setLayout(new GridLayout(8, 4, 3, 3));
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 4; j++) {
                grilleButtons[i][j] = new JButton();
                grilleButtons[i][j].setEnabled(false); // Désactivé par défaut
                grilleButtons[i][j].setBackground(Color.WHITE);
                PanneauGrille.add(grilleButtons[i][j]);
            }
        }
    }

    /**
     * Configure les boutons dans le panneau de combinaison.
     */
    private void configurerPanneauCombinaison() {
        Combinaison.setLayout(new GridLayout(1, 4, 3, 3));
        for (int i = 0; i < 4; i++) {
            combinaisonButtons[i] = new JButton();
            combinaisonButtons[i].setBackground(couleurs[0]); // Couleur initiale
            combinaisonNumerique[i] = couleurToNumero.get(couleurs[0]); // Numéro initial
            final int index = i;
            combinaisonButtons[i].addActionListener(e -> {
                // Change la couleur et met à jour le numéro correspondant
                Color currentColor = combinaisonButtons[index].getBackground();
                int nextIndex = (indexCouleur(couleurs, currentColor) + 1) % couleurs.length;
                Color nextColor = couleurs[nextIndex];
                combinaisonButtons[index].setBackground(nextColor);
                combinaisonNumerique[index] = couleurToNumero.get(nextColor);
            });
            Combinaison.add(combinaisonButtons[i]);
        }
    }

    /**
     * Retourne l'index d'une couleur donnée dans le tableau de couleurs.
     */
    private int indexCouleur(Color[] couleurs, Color couleur) {
        for (int i = 0; i < couleurs.length; i++) {
            if (couleurs[i].equals(couleur)) {
                return i;
            }
        }
        return -1; // Couleur non trouvée
    }

    /**
     * Valide la combinaison en cours, l'ajoute au plateau et l'affiche dans la grille.
     */
    public void validerCombinaison() {
        // Vérifie si toutes les lignes sont déjà remplies
        if (currentRow < 0) {
            JOptionPane.showMessageDialog(this, "Toutes les lignes ont été remplies !");
            return;
        }

        // Ajoute les numéros de la combinaison au plateau
        for (int col = 0; col < 4; col++) {
            plateauDeJeu[currentRow][col] = combinaisonNumerique[col];
            grilleButtons[currentRow][col].setBackground(combinaisonButtons[col].getBackground());
        }

        // Passe à la ligne suivante (au-dessus)
        currentRow--;
    }

    
   
    
        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
       
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanneauGrille = new javax.swing.JPanel();
        Combinaison = new javax.swing.JPanel();
        btnvalider = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanneauGrille.setBackground(new java.awt.Color(200, 0, 100));
        PanneauGrille.setLayout(new java.awt.GridLayout(8, 4, 3, 3));

        Combinaison.setBackground(new java.awt.Color(200, 0, 100));

        javax.swing.GroupLayout CombinaisonLayout = new javax.swing.GroupLayout(Combinaison);
        Combinaison.setLayout(CombinaisonLayout);
        CombinaisonLayout.setHorizontalGroup(
            CombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CombinaisonLayout.setVerticalGroup(
            CombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        btnvalider.setText("valider");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PanneauGrille, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(Combinaison, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(btnvalider)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(PanneauGrille, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Combinaison, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnvalider)
                        .addGap(48, 48, 48))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MasterMind().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Combinaison;
    private javax.swing.JPanel PanneauGrille;
    private javax.swing.JButton btnvalider;
    // End of variables declaration//GEN-END:variables

   


}
