import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.JFrame;

/*
 * SAVINA Liza
 * VABRE Aliénor
 * 29/11/2024
 */
/**
 *
 * @author alien
 */
public class MasterMind extends JFrame {

    private Color[] couleurs = {Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW};
    private int indexCouleur = 0;
    private JButton btnValider;
   
    private JButton[][] grilleButtons = new JButton[8][4];
    private JButton[] combinaisonButtons = new JButton[4];

    /**
     * Constructeur principal
     */
    public MasterMind() {
        initComponents(); // Initialisation automatique
        configurerPanneauGrille();
        configurerPanneauCombinaison();
       
    }

    /**
     * Configure les boutons dans le panneau de grille.
     */
    private void configurerPanneauGrille() {
        PanneauGrille.setLayout(new GridLayout(8, 4, 3, 3)); // Grille de 8x4 avec marges
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 4; j++) {
                grilleButtons[i][j] = new JButton();
                grilleButtons[i][j].setEnabled(false); // Désactiver les boutons de la grille par défaut
                grilleButtons[i][j].setBackground(Color.WHITE); // Couleur initiale
                PanneauGrille.add(grilleButtons[i][j]);
            }
        }
    }

    /**
     * Configure les boutons dans le panneau de combinaison.
     */
    private void configurerPanneauCombinaison() {
        Combinaison.setLayout(new GridLayout(1, 4, 3, 3)); // Ligne de 4 boutons
        for (int i = 0; i < 4; i++) {
            combinaisonButtons[i] = new JButton();
            combinaisonButtons[i].setBackground(couleurs[indexCouleur]); // Initialiser avec la première couleur
            final int index = i;
            combinaisonButtons[i].addActionListener(e -> {
                indexCouleur = (indexCouleur + 1) % couleurs.length; // Change la couleur à chaque clic
                combinaisonButtons[index].setBackground(couleurs[indexCouleur]);
            });
            Combinaison.add(combinaisonButtons[i]);
        }
    }

    /**
     * Copie la combinaison sélectionnée dans une ligne vide de la grille.
     */
     public void validerCombinaison() {
        // Chercher une ligne vide dans la grille
        for (int i = 0; i < 8; i++) {
            boolean ligneVide = true;
            for (int j = 0; j < 4; j++) {
                if (grilleButtons[i][j].getBackground() != Color.WHITE) {
                    ligneVide = false;
                    break;
                }
            }

            // Si la ligne est vide, copier la combinaison dans cette ligne
            if (ligneVide) {
                for (int j = 0; j < 4; j++) {
                    grilleButtons[i][j].setBackground(combinaisonButtons[j].getBackground());
                }
                break;
            }
        }
    }
    
        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
       
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanneauGrille = new javax.swing.JPanel();
        Combinaison = new javax.swing.JPanel();
        btnvalider = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanneauGrille.setBackground(new java.awt.Color(200, 0, 100));
        PanneauGrille.setLayout(new java.awt.GridLayout(8, 4, 3, 3));

        Combinaison.setBackground(new java.awt.Color(200, 0, 100));

        javax.swing.GroupLayout CombinaisonLayout = new javax.swing.GroupLayout(Combinaison);
        Combinaison.setLayout(CombinaisonLayout);
        CombinaisonLayout.setHorizontalGroup(
            CombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CombinaisonLayout.setVerticalGroup(
            CombinaisonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        btnvalider.setText("valider");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PanneauGrille, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                    .addComponent(Combinaison, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(56, 56, 56)
                .addComponent(btnvalider)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(PanneauGrille, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Combinaison, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnvalider)
                        .addGap(61, 61, 61))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MasterMind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MasterMind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MasterMind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MasterMind.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MasterMind().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Combinaison;
    private javax.swing.JPanel PanneauGrille;
    private javax.swing.JButton btnvalider;
    // End of variables declaration//GEN-END:variables

   


}
